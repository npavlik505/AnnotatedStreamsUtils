Bootstrap: localimage
From: base.sif
Stage: build

# before running the build script you must run
# sh ./prepare-build.sh

# https://catalog.ngc.nvidia.com/orgs/nvidia/containers/nvhpc

%files
	${STREAMS_DIR} /streams

	${STREAMS_UTILS_DIR}/src/ /streams-utils/src
	${STREAMS_UTILS_DIR}/Cargo.toml /streams-utils/Cargo.toml
	${STREAMS_UTILS_DIR}/Cargo.lock /streams-utils/Cargo.lock
	
	# required to build distribute as a dependency
	$HOME/.git-credentials /root/.git-credentials

%post
	## this line must run to let git know that there might be a credential
	## store already on disk
	#git config --global credential.helper store
	#cat /root/.git-credentials

	#echo "$HOME"

	## hack to add cargo to path
	#export PATH="$PATH":"$HOME/.cargo/bin"

	## clone the cuda samples directory
	#which nvcc
	#cd /
	#git clone "https://github.com/Fluid-Dynamics-Group/cuda-samples" --depth 1
	#cd /cuda-samples/Samples/0_Introduction/simpleZeroCopy
	#make

	## make streams-utils
	#cd /streams-utils
	#cargo build --release

	# make streams
	cd /streams/src
	# replace (in the makefile)
	# COMPILE = "gnu"
	# with
	# COMPILE = "nvfortran"
	bash -c 'cat Makefile | sed "s/COMPILE = \"gnu\"/COMPILE = \"nvfortran\"/" &> Makefile2'
	# for some reason singularity does not like us directly piping the output of
	# ./Makefile to ./Makefile so we have to use this workaround
	mv Makefile2 Makefile
	make
	ls -al

	echo "COMPILED STREAMS FILES!"
	echo "compiling python extensions"

	# https://forums.developer.nvidia.com/t/compiling-python-wrappers-with-f2py-and-cuda-fortran/157217
	#LDFLAGS="-Mcuda,-fPIC" NPY_DISTUTILS_APPEND_FLAGS=1 make f2py
	LDFLAGS="-Mcuda=cuda11.5 -DUSE_CUDA -DCUDA_ASYNC" NPY_DISTUTILS_APPEND_FLAGS=1 make f2py
	ls -al

	# flush the evidence
	rm /root/.git-credentials

#Bootstrap: localimage
#From: nv.sif 
## use base here so that we have access to python still
#	
#%files from build
#	/streams-utils/target/release/streams-utils /streams-utils
#	/streams/src/streams.exe /streams.exe
#
#	/cuda-samples/bin/x86_64/linux/release/simpleZeroCopy /simpleZeroCopy
#
#	# python files to run streams
#	/streams/src/libstreams.cpython-310-x86_64-linux-gnu.so /libstreams.cpython-310-x86_64-linux-gnu.so
#	/streams/src/libstreams.cpython-38-x86_64-linux-gnu.so /libstreams.cpython-38-x86_64-linux-gnu.so
#	/streams/src/*.o /
#	/streams/src/pybind.py /pybind.py
#
#%post
#	apt-get update -y
#	apt-get install python3 -y
#
#%apprun distribute
#	cd /
#	ls -al
#
#	echo "executing zero copy to initialize the gpu"
#	/simpleZeroCopy
#
#	echo "finished simple zero copy!"
#
#	# doing the rest of the stuff
#	#/streams-utils run-solver $1
#	/streams-utils run-container  4
